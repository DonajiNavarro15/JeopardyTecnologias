//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestJeopardyServidor.TestServerJeopardy {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TestServerJeopardy.ICheckUserLivingService", CallbackContract=typeof(TestJeopardyServidor.TestServerJeopardy.ICheckUserLivingServiceCallback))]
    public interface ICheckUserLivingService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICheckUserLivingService/SubscribeToICheckUserLiving", ReplyAction="http://tempuri.org/ICheckUserLivingService/SubscribeToICheckUserLivingResponse")]
        int SubscribeToICheckUserLiving(JeopardyGame.Data.UserPojo user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICheckUserLivingService/SubscribeToICheckUserLiving", ReplyAction="http://tempuri.org/ICheckUserLivingService/SubscribeToICheckUserLivingResponse")]
        System.Threading.Tasks.Task<int> SubscribeToICheckUserLivingAsync(JeopardyGame.Data.UserPojo user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICheckUserLivingService/RenewLivingCallBack", ReplyAction="http://tempuri.org/ICheckUserLivingService/RenewLivingCallBackResponse")]
        int RenewLivingCallBack(JeopardyGame.Data.UserPojo user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICheckUserLivingService/RenewLivingCallBack", ReplyAction="http://tempuri.org/ICheckUserLivingService/RenewLivingCallBackResponse")]
        System.Threading.Tasks.Task<int> RenewLivingCallBackAsync(JeopardyGame.Data.UserPojo user);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICheckUserLivingServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICheckUserLivingService/IsClientActive", ReplyAction="http://tempuri.org/ICheckUserLivingService/IsClientActiveResponse")]
        bool IsClientActive();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICheckUserLivingServiceChannel : TestJeopardyServidor.TestServerJeopardy.ICheckUserLivingService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CheckUserLivingServiceClient : System.ServiceModel.DuplexClientBase<TestJeopardyServidor.TestServerJeopardy.ICheckUserLivingService>, TestJeopardyServidor.TestServerJeopardy.ICheckUserLivingService {
        
        public CheckUserLivingServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public CheckUserLivingServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public CheckUserLivingServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public CheckUserLivingServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public CheckUserLivingServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public int SubscribeToICheckUserLiving(JeopardyGame.Data.UserPojo user) {
            return base.Channel.SubscribeToICheckUserLiving(user);
        }
        
        public System.Threading.Tasks.Task<int> SubscribeToICheckUserLivingAsync(JeopardyGame.Data.UserPojo user) {
            return base.Channel.SubscribeToICheckUserLivingAsync(user);
        }
        
        public int RenewLivingCallBack(JeopardyGame.Data.UserPojo user) {
            return base.Channel.RenewLivingCallBack(user);
        }
        
        public System.Threading.Tasks.Task<int> RenewLivingCallBackAsync(JeopardyGame.Data.UserPojo user) {
            return base.Channel.RenewLivingCallBackAsync(user);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TestServerJeopardy.ICheckUserLivingUnsubscribe")]
    public interface ICheckUserLivingUnsubscribe {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICheckUserLivingUnsubscribe/UnsubscribeFromICheckUserLiving")]
        void UnsubscribeFromICheckUserLiving(JeopardyGame.Data.UserPojo user);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ICheckUserLivingUnsubscribe/UnsubscribeFromICheckUserLiving")]
        System.Threading.Tasks.Task UnsubscribeFromICheckUserLivingAsync(JeopardyGame.Data.UserPojo user);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICheckUserLivingUnsubscribeChannel : TestJeopardyServidor.TestServerJeopardy.ICheckUserLivingUnsubscribe, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CheckUserLivingUnsubscribeClient : System.ServiceModel.ClientBase<TestJeopardyServidor.TestServerJeopardy.ICheckUserLivingUnsubscribe>, TestJeopardyServidor.TestServerJeopardy.ICheckUserLivingUnsubscribe {
        
        public CheckUserLivingUnsubscribeClient() {
        }
        
        public CheckUserLivingUnsubscribeClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CheckUserLivingUnsubscribeClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CheckUserLivingUnsubscribeClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CheckUserLivingUnsubscribeClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void UnsubscribeFromICheckUserLiving(JeopardyGame.Data.UserPojo user) {
            base.Channel.UnsubscribeFromICheckUserLiving(user);
        }
        
        public System.Threading.Tasks.Task UnsubscribeFromICheckUserLivingAsync(JeopardyGame.Data.UserPojo user) {
            return base.Channel.UnsubscribeFromICheckUserLivingAsync(user);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TestServerJeopardy.IChatForTeamsService", CallbackContract=typeof(TestJeopardyServidor.TestServerJeopardy.IChatForTeamsServiceCallback))]
    public interface IChatForTeamsService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatForTeamsService/RegisterForTeamChat")]
        void RegisterForTeamChat(int idUser);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatForTeamsService/RegisterForTeamChat")]
        System.Threading.Tasks.Task RegisterForTeamChatAsync(int idUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatForTeamsService/RenewTeamChatCallBack", ReplyAction="http://tempuri.org/IChatForTeamsService/RenewTeamChatCallBackResponse")]
        int RenewTeamChatCallBack(int idUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatForTeamsService/RenewTeamChatCallBack", ReplyAction="http://tempuri.org/IChatForTeamsService/RenewTeamChatCallBackResponse")]
        System.Threading.Tasks.Task<int> RenewTeamChatCallBackAsync(int idUser);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatForTeamsServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatForTeamsService/ReceiveMessageTeamChat", ReplyAction="http://tempuri.org/IChatForTeamsService/ReceiveMessageTeamChatResponse")]
        void ReceiveMessageTeamChat(JeopardyGame.Data.GenericClass<JeopardyGame.Data.MessageChat> message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatForTeamsServiceChannel : TestJeopardyServidor.TestServerJeopardy.IChatForTeamsService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatForTeamsServiceClient : System.ServiceModel.DuplexClientBase<TestJeopardyServidor.TestServerJeopardy.IChatForTeamsService>, TestJeopardyServidor.TestServerJeopardy.IChatForTeamsService {
        
        public ChatForTeamsServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ChatForTeamsServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ChatForTeamsServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatForTeamsServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatForTeamsServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void RegisterForTeamChat(int idUser) {
            base.Channel.RegisterForTeamChat(idUser);
        }
        
        public System.Threading.Tasks.Task RegisterForTeamChatAsync(int idUser) {
            return base.Channel.RegisterForTeamChatAsync(idUser);
        }
        
        public int RenewTeamChatCallBack(int idUser) {
            return base.Channel.RenewTeamChatCallBack(idUser);
        }
        
        public System.Threading.Tasks.Task<int> RenewTeamChatCallBackAsync(int idUser) {
            return base.Channel.RenewTeamChatCallBackAsync(idUser);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TestServerJeopardy.IChatForTeamsOperations")]
    public interface IChatForTeamsOperations {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatForTeamsOperations/SendMessageTeam")]
        void SendMessageTeam(int idUser, int idTeamMate, string userName, string messageToSend);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatForTeamsOperations/SendMessageTeam")]
        System.Threading.Tasks.Task SendMessageTeamAsync(int idUser, int idTeamMate, string userName, string messageToSend);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatForTeamsOperations/UnregisterFromTeamChat")]
        void UnregisterFromTeamChat(int idUser);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatForTeamsOperations/UnregisterFromTeamChat")]
        System.Threading.Tasks.Task UnregisterFromTeamChatAsync(int idUser);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatForTeamsOperationsChannel : TestJeopardyServidor.TestServerJeopardy.IChatForTeamsOperations, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatForTeamsOperationsClient : System.ServiceModel.ClientBase<TestJeopardyServidor.TestServerJeopardy.IChatForTeamsOperations>, TestJeopardyServidor.TestServerJeopardy.IChatForTeamsOperations {
        
        public ChatForTeamsOperationsClient() {
        }
        
        public ChatForTeamsOperationsClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ChatForTeamsOperationsClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ChatForTeamsOperationsClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ChatForTeamsOperationsClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void SendMessageTeam(int idUser, int idTeamMate, string userName, string messageToSend) {
            base.Channel.SendMessageTeam(idUser, idTeamMate, userName, messageToSend);
        }
        
        public System.Threading.Tasks.Task SendMessageTeamAsync(int idUser, int idTeamMate, string userName, string messageToSend) {
            return base.Channel.SendMessageTeamAsync(idUser, idTeamMate, userName, messageToSend);
        }
        
        public void UnregisterFromTeamChat(int idUser) {
            base.Channel.UnregisterFromTeamChat(idUser);
        }
        
        public System.Threading.Tasks.Task UnregisterFromTeamChatAsync(int idUser) {
            return base.Channel.UnregisterFromTeamChatAsync(idUser);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TestServerJeopardy.IFriendManagerService", CallbackContract=typeof(TestJeopardyServidor.TestServerJeopardy.IFriendManagerServiceCallback))]
    public interface IFriendManagerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendManagerService/RegisterFriendManagerUser", ReplyAction="http://tempuri.org/IFriendManagerService/RegisterFriendManagerUserResponse")]
        JeopardyGame.Data.GenericClass<int> RegisterFriendManagerUser(int idUserFriendManager);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendManagerService/RegisterFriendManagerUser", ReplyAction="http://tempuri.org/IFriendManagerService/RegisterFriendManagerUserResponse")]
        System.Threading.Tasks.Task<JeopardyGame.Data.GenericClass<int>> RegisterFriendManagerUserAsync(int idUserFriendManager);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendManagerService/RenewFriendManagerUserCallBack", ReplyAction="http://tempuri.org/IFriendManagerService/RenewFriendManagerUserCallBackResponse")]
        int RenewFriendManagerUserCallBack(int idUserFriendManager);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendManagerService/RenewFriendManagerUserCallBack", ReplyAction="http://tempuri.org/IFriendManagerService/RenewFriendManagerUserCallBackResponse")]
        System.Threading.Tasks.Task<int> RenewFriendManagerUserCallBackAsync(int idUserFriendManager);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFriendManagerServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendManagerService/ResponseReported", ReplyAction="http://tempuri.org/IFriendManagerService/ResponseReportedResponse")]
        void ResponseReported(int numReports);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendManagerService/ResponseEliminationFromFriends", ReplyAction="http://tempuri.org/IFriendManagerService/ResponseEliminationFromFriendsResponse")]
        void ResponseEliminationFromFriends(int idUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendManagerService/ResponseRequestAction", ReplyAction="http://tempuri.org/IFriendManagerService/ResponseRequestActionResponse")]
        void ResponseRequestAction(int idUser, int requestStatus, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendManagerService/ResponseNewPlayerJusJoin", ReplyAction="http://tempuri.org/IFriendManagerService/ResponseNewPlayerJusJoinResponse")]
        void ResponseNewPlayerJusJoin(int idUser, string userName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFriendManagerServiceChannel : TestJeopardyServidor.TestServerJeopardy.IFriendManagerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FriendManagerServiceClient : System.ServiceModel.DuplexClientBase<TestJeopardyServidor.TestServerJeopardy.IFriendManagerService>, TestJeopardyServidor.TestServerJeopardy.IFriendManagerService {
        
        public FriendManagerServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public FriendManagerServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public FriendManagerServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public FriendManagerServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public FriendManagerServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public JeopardyGame.Data.GenericClass<int> RegisterFriendManagerUser(int idUserFriendManager) {
            return base.Channel.RegisterFriendManagerUser(idUserFriendManager);
        }
        
        public System.Threading.Tasks.Task<JeopardyGame.Data.GenericClass<int>> RegisterFriendManagerUserAsync(int idUserFriendManager) {
            return base.Channel.RegisterFriendManagerUserAsync(idUserFriendManager);
        }
        
        public int RenewFriendManagerUserCallBack(int idUserFriendManager) {
            return base.Channel.RenewFriendManagerUserCallBack(idUserFriendManager);
        }
        
        public System.Threading.Tasks.Task<int> RenewFriendManagerUserCallBackAsync(int idUserFriendManager) {
            return base.Channel.RenewFriendManagerUserCallBackAsync(idUserFriendManager);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TestServerJeopardy.IFriendManagerOperations")]
    public interface IFriendManagerOperations {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFriendManagerOperations/UnregisterFromFriendManager")]
        void UnregisterFromFriendManager(int idUserFriendManager);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFriendManagerOperations/UnregisterFromFriendManager")]
        System.Threading.Tasks.Task UnregisterFromFriendManagerAsync(int idUserFriendManager);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendManagerOperations/ReportFriend", ReplyAction="http://tempuri.org/IFriendManagerOperations/ReportFriendResponse")]
        JeopardyGame.Data.GenericClass<int> ReportFriend(int idPlayerBanned, int idUserBanning);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendManagerOperations/ReportFriend", ReplyAction="http://tempuri.org/IFriendManagerOperations/ReportFriendResponse")]
        System.Threading.Tasks.Task<JeopardyGame.Data.GenericClass<int>> ReportFriendAsync(int idPlayerBanned, int idUserBanning);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFriendManagerOperations/EliminateUserFromFriends")]
        void EliminateUserFromFriends(int idPlayerDeleting, int idUserToEliminate);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFriendManagerOperations/EliminateUserFromFriends")]
        System.Threading.Tasks.Task EliminateUserFromFriendsAsync(int idPlayerDeleting, int idUserToEliminate);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFriendManagerOperations/SendFriendRequest")]
        void SendFriendRequest(int idPLayerRequesting, int idUserRequested);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFriendManagerOperations/SendFriendRequest")]
        System.Threading.Tasks.Task SendFriendRequestAsync(int idPLayerRequesting, int idUserRequested);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFriendManagerOperations/AcceptFriendRequest")]
        void AcceptFriendRequest(int idPlayerAccepting, int idUserRequesting);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFriendManagerOperations/AcceptFriendRequest")]
        System.Threading.Tasks.Task AcceptFriendRequestAsync(int idPlayerAccepting, int idUserRequesting);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFriendManagerOperations/DeclineFriendRequest")]
        void DeclineFriendRequest(int idPlayerDeclining, int idUserRequesting);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IFriendManagerOperations/DeclineFriendRequest")]
        System.Threading.Tasks.Task DeclineFriendRequestAsync(int idPlayerDeclining, int idUserRequesting);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFriendManagerOperationsChannel : TestJeopardyServidor.TestServerJeopardy.IFriendManagerOperations, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FriendManagerOperationsClient : System.ServiceModel.ClientBase<TestJeopardyServidor.TestServerJeopardy.IFriendManagerOperations>, TestJeopardyServidor.TestServerJeopardy.IFriendManagerOperations {
        
        public FriendManagerOperationsClient() {
        }
        
        public FriendManagerOperationsClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FriendManagerOperationsClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FriendManagerOperationsClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FriendManagerOperationsClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void UnregisterFromFriendManager(int idUserFriendManager) {
            base.Channel.UnregisterFromFriendManager(idUserFriendManager);
        }
        
        public System.Threading.Tasks.Task UnregisterFromFriendManagerAsync(int idUserFriendManager) {
            return base.Channel.UnregisterFromFriendManagerAsync(idUserFriendManager);
        }
        
        public JeopardyGame.Data.GenericClass<int> ReportFriend(int idPlayerBanned, int idUserBanning) {
            return base.Channel.ReportFriend(idPlayerBanned, idUserBanning);
        }
        
        public System.Threading.Tasks.Task<JeopardyGame.Data.GenericClass<int>> ReportFriendAsync(int idPlayerBanned, int idUserBanning) {
            return base.Channel.ReportFriendAsync(idPlayerBanned, idUserBanning);
        }
        
        public void EliminateUserFromFriends(int idPlayerDeleting, int idUserToEliminate) {
            base.Channel.EliminateUserFromFriends(idPlayerDeleting, idUserToEliminate);
        }
        
        public System.Threading.Tasks.Task EliminateUserFromFriendsAsync(int idPlayerDeleting, int idUserToEliminate) {
            return base.Channel.EliminateUserFromFriendsAsync(idPlayerDeleting, idUserToEliminate);
        }
        
        public void SendFriendRequest(int idPLayerRequesting, int idUserRequested) {
            base.Channel.SendFriendRequest(idPLayerRequesting, idUserRequested);
        }
        
        public System.Threading.Tasks.Task SendFriendRequestAsync(int idPLayerRequesting, int idUserRequested) {
            return base.Channel.SendFriendRequestAsync(idPLayerRequesting, idUserRequested);
        }
        
        public void AcceptFriendRequest(int idPlayerAccepting, int idUserRequesting) {
            base.Channel.AcceptFriendRequest(idPlayerAccepting, idUserRequesting);
        }
        
        public System.Threading.Tasks.Task AcceptFriendRequestAsync(int idPlayerAccepting, int idUserRequesting) {
            return base.Channel.AcceptFriendRequestAsync(idPlayerAccepting, idUserRequesting);
        }
        
        public void DeclineFriendRequest(int idPlayerDeclining, int idUserRequesting) {
            base.Channel.DeclineFriendRequest(idPlayerDeclining, idUserRequesting);
        }
        
        public System.Threading.Tasks.Task DeclineFriendRequestAsync(int idPlayerDeclining, int idUserRequesting) {
            return base.Channel.DeclineFriendRequestAsync(idPlayerDeclining, idUserRequesting);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TestServerJeopardy.INotifyAvailabilityService", CallbackContract=typeof(TestJeopardyServidor.TestServerJeopardy.INotifyAvailabilityServiceCallback))]
    public interface INotifyAvailabilityService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/INotifyAvailabilityService/SubscribeToAvailabityCallBackChanne" +
            "l")]
        void SubscribeToAvailabityCallBackChannel(int idNewActiveUser);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/INotifyAvailabilityService/SubscribeToAvailabityCallBackChanne" +
            "l")]
        System.Threading.Tasks.Task SubscribeToAvailabityCallBackChannelAsync(int idNewActiveUser);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/INotifyAvailabilityService/RenewNotifyAvailabityCallBack")]
        void RenewNotifyAvailabityCallBack(int idUser);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/INotifyAvailabilityService/RenewNotifyAvailabityCallBack")]
        System.Threading.Tasks.Task RenewNotifyAvailabityCallBackAsync(int idUser);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface INotifyAvailabilityServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotifyAvailabilityService/ResponseOfPlayerAvailability", ReplyAction="http://tempuri.org/INotifyAvailabilityService/ResponseOfPlayerAvailabilityRespons" +
            "e")]
        void ResponseOfPlayerAvailability(int status, int idFriend);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface INotifyAvailabilityServiceChannel : TestJeopardyServidor.TestServerJeopardy.INotifyAvailabilityService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NotifyAvailabilityServiceClient : System.ServiceModel.DuplexClientBase<TestJeopardyServidor.TestServerJeopardy.INotifyAvailabilityService>, TestJeopardyServidor.TestServerJeopardy.INotifyAvailabilityService {
        
        public NotifyAvailabilityServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public NotifyAvailabilityServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public NotifyAvailabilityServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public NotifyAvailabilityServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public NotifyAvailabilityServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void SubscribeToAvailabityCallBackChannel(int idNewActiveUser) {
            base.Channel.SubscribeToAvailabityCallBackChannel(idNewActiveUser);
        }
        
        public System.Threading.Tasks.Task SubscribeToAvailabityCallBackChannelAsync(int idNewActiveUser) {
            return base.Channel.SubscribeToAvailabityCallBackChannelAsync(idNewActiveUser);
        }
        
        public void RenewNotifyAvailabityCallBack(int idUser) {
            base.Channel.RenewNotifyAvailabityCallBack(idUser);
        }
        
        public System.Threading.Tasks.Task RenewNotifyAvailabityCallBackAsync(int idUser) {
            return base.Channel.RenewNotifyAvailabityCallBackAsync(idUser);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TestServerJeopardy.INotifyAvailabilityOperations")]
    public interface INotifyAvailabilityOperations {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/INotifyAvailabilityOperations/UserIsAvailable")]
        void UserIsAvailable(int idNewActiveUser);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/INotifyAvailabilityOperations/UserIsAvailable")]
        System.Threading.Tasks.Task UserIsAvailableAsync(int idNewActiveUser);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/INotifyAvailabilityOperations/UserIsPlaying")]
        void UserIsPlaying(int idUserPlaying);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/INotifyAvailabilityOperations/UserIsPlaying")]
        System.Threading.Tasks.Task UserIsPlayingAsync(int idUserPlaying);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/INotifyAvailabilityOperations/UserIsNotAvailable")]
        void UserIsNotAvailable(int idUserDisconnecting);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/INotifyAvailabilityOperations/UserIsNotAvailable")]
        System.Threading.Tasks.Task UserIsNotAvailableAsync(int idUserDisconnecting);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/INotifyAvailabilityOperations/NotifyUserAboutNewPlayer")]
        void NotifyUserAboutNewPlayer(int idNewPlayer, string userName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/INotifyAvailabilityOperations/NotifyUserAboutNewPlayer")]
        System.Threading.Tasks.Task NotifyUserAboutNewPlayerAsync(int idNewPlayer, string userName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface INotifyAvailabilityOperationsChannel : TestJeopardyServidor.TestServerJeopardy.INotifyAvailabilityOperations, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NotifyAvailabilityOperationsClient : System.ServiceModel.ClientBase<TestJeopardyServidor.TestServerJeopardy.INotifyAvailabilityOperations>, TestJeopardyServidor.TestServerJeopardy.INotifyAvailabilityOperations {
        
        public NotifyAvailabilityOperationsClient() {
        }
        
        public NotifyAvailabilityOperationsClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public NotifyAvailabilityOperationsClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NotifyAvailabilityOperationsClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NotifyAvailabilityOperationsClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void UserIsAvailable(int idNewActiveUser) {
            base.Channel.UserIsAvailable(idNewActiveUser);
        }
        
        public System.Threading.Tasks.Task UserIsAvailableAsync(int idNewActiveUser) {
            return base.Channel.UserIsAvailableAsync(idNewActiveUser);
        }
        
        public void UserIsPlaying(int idUserPlaying) {
            base.Channel.UserIsPlaying(idUserPlaying);
        }
        
        public System.Threading.Tasks.Task UserIsPlayingAsync(int idUserPlaying) {
            return base.Channel.UserIsPlayingAsync(idUserPlaying);
        }
        
        public void UserIsNotAvailable(int idUserDisconnecting) {
            base.Channel.UserIsNotAvailable(idUserDisconnecting);
        }
        
        public System.Threading.Tasks.Task UserIsNotAvailableAsync(int idUserDisconnecting) {
            return base.Channel.UserIsNotAvailableAsync(idUserDisconnecting);
        }
        
        public void NotifyUserAboutNewPlayer(int idNewPlayer, string userName) {
            base.Channel.NotifyUserAboutNewPlayer(idNewPlayer, userName);
        }
        
        public System.Threading.Tasks.Task NotifyUserAboutNewPlayerAsync(int idNewPlayer, string userName) {
            return base.Channel.NotifyUserAboutNewPlayerAsync(idNewPlayer, userName);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TestServerJeopardy.ILobbyService", CallbackContract=typeof(TestJeopardyServidor.TestServerJeopardy.ILobbyServiceCallback))]
    public interface ILobbyService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyService/CreateNewLobby", ReplyAction="http://tempuri.org/ILobbyService/CreateNewLobbyResponse")]
        JeopardyGame.Data.GenericClass<int> CreateNewLobby(int roomCode, int idUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyService/CreateNewLobby", ReplyAction="http://tempuri.org/ILobbyService/CreateNewLobbyResponse")]
        System.Threading.Tasks.Task<JeopardyGame.Data.GenericClass<int>> CreateNewLobbyAsync(int roomCode, int idUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyService/JoinIntoLobby", ReplyAction="http://tempuri.org/ILobbyService/JoinIntoLobbyResponse")]
        JeopardyGame.Data.GenericClass<int> JoinIntoLobby(int roomCode, int idUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyService/JoinIntoLobby", ReplyAction="http://tempuri.org/ILobbyService/JoinIntoLobbyResponse")]
        System.Threading.Tasks.Task<JeopardyGame.Data.GenericClass<int>> JoinIntoLobbyAsync(int roomCode, int idUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyService/RenewLobbyCallBack", ReplyAction="http://tempuri.org/ILobbyService/RenewLobbyCallBackResponse")]
        int RenewLobbyCallBack(int roomCode, int idUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyService/RenewLobbyCallBack", ReplyAction="http://tempuri.org/ILobbyService/RenewLobbyCallBackResponse")]
        System.Threading.Tasks.Task<int> RenewLobbyCallBackAsync(int roomCode, int idUser);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILobbyServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyService/UpdateJoinedPlayerResponse")]
        void UpdateJoinedPlayerResponse(JeopardyGame.Data.GenericClass<JeopardyGame.Data.PlayerInLobby[]> playersInTheLobby);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyService/MakeTeamsResponse", ReplyAction="http://tempuri.org/ILobbyService/MakeTeamsResponseResponse")]
        void MakeTeamsResponse(bool teamUp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyService/UpdateTeamSide", ReplyAction="http://tempuri.org/ILobbyService/UpdateTeamSideResponse")]
        void UpdateTeamSide(JeopardyGame.Data.GenericClass<JeopardyGame.Data.PlayerInLobby[]> playersInTheLobby);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyService/DissolvingLobby")]
        void DissolvingLobby();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyService/NotifyQuestionsAreReady", ReplyAction="http://tempuri.org/ILobbyService/NotifyQuestionsAreReadyResponse")]
        void NotifyQuestionsAreReady(int codeEvent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyService/NotifyGameWillStart", ReplyAction="http://tempuri.org/ILobbyService/NotifyGameWillStartResponse")]
        void NotifyGameWillStart(JeopardyGame.Data.QuestionCardInformation[] questionsForGame);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILobbyServiceChannel : TestJeopardyServidor.TestServerJeopardy.ILobbyService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LobbyServiceClient : System.ServiceModel.DuplexClientBase<TestJeopardyServidor.TestServerJeopardy.ILobbyService>, TestJeopardyServidor.TestServerJeopardy.ILobbyService {
        
        public LobbyServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public LobbyServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public LobbyServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public LobbyServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public LobbyServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public JeopardyGame.Data.GenericClass<int> CreateNewLobby(int roomCode, int idUser) {
            return base.Channel.CreateNewLobby(roomCode, idUser);
        }
        
        public System.Threading.Tasks.Task<JeopardyGame.Data.GenericClass<int>> CreateNewLobbyAsync(int roomCode, int idUser) {
            return base.Channel.CreateNewLobbyAsync(roomCode, idUser);
        }
        
        public JeopardyGame.Data.GenericClass<int> JoinIntoLobby(int roomCode, int idUser) {
            return base.Channel.JoinIntoLobby(roomCode, idUser);
        }
        
        public System.Threading.Tasks.Task<JeopardyGame.Data.GenericClass<int>> JoinIntoLobbyAsync(int roomCode, int idUser) {
            return base.Channel.JoinIntoLobbyAsync(roomCode, idUser);
        }
        
        public int RenewLobbyCallBack(int roomCode, int idUser) {
            return base.Channel.RenewLobbyCallBack(roomCode, idUser);
        }
        
        public System.Threading.Tasks.Task<int> RenewLobbyCallBackAsync(int roomCode, int idUser) {
            return base.Channel.RenewLobbyCallBackAsync(roomCode, idUser);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TestServerJeopardy.ILobbyOperation")]
    public interface ILobbyOperation {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyOperation/GetAllCurrentPlayerInLobby", ReplyAction="http://tempuri.org/ILobbyOperation/GetAllCurrentPlayerInLobbyResponse")]
        JeopardyGame.Data.GenericClass<JeopardyGame.Data.PlayerInLobby[]> GetAllCurrentPlayerInLobby(int roomCode, int idUserRequesting);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyOperation/GetAllCurrentPlayerInLobby", ReplyAction="http://tempuri.org/ILobbyOperation/GetAllCurrentPlayerInLobbyResponse")]
        System.Threading.Tasks.Task<JeopardyGame.Data.GenericClass<JeopardyGame.Data.PlayerInLobby[]>> GetAllCurrentPlayerInLobbyAsync(int roomCode, int idUserRequesting);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyOperation/DissolveLobby")]
        void DissolveLobby(int roomCode, int idUser);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyOperation/DissolveLobby")]
        System.Threading.Tasks.Task DissolveLobbyAsync(int roomCode, int idUser);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyOperation/NotifyPlayerInLobby")]
        void NotifyPlayerInLobby(int roomCode, int idUser);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyOperation/NotifyPlayerInLobby")]
        System.Threading.Tasks.Task NotifyPlayerInLobbyAsync(int roomCode, int idUser);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyOperation/LeaveLobby")]
        void LeaveLobby(int roomCode, int idUserLeaving);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyOperation/LeaveLobby")]
        System.Threading.Tasks.Task LeaveLobbyAsync(int roomCode, int idUserLeaving);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyOperation/EliminatePlayerFromLobby")]
        void EliminatePlayerFromLobby(int roomCode, int idUserToEliminate);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyOperation/EliminatePlayerFromLobby")]
        System.Threading.Tasks.Task EliminatePlayerFromLobbyAsync(int roomCode, int idUserToEliminate);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyOperation/SelectQuestionsForGame")]
        void SelectQuestionsForGame(int roomCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyOperation/SelectQuestionsForGame")]
        System.Threading.Tasks.Task SelectQuestionsForGameAsync(int roomCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyOperation/StartGame")]
        void StartGame(int roomCode);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyOperation/StartGame")]
        System.Threading.Tasks.Task StartGameAsync(int roomCode);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILobbyOperationChannel : TestJeopardyServidor.TestServerJeopardy.ILobbyOperation, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LobbyOperationClient : System.ServiceModel.ClientBase<TestJeopardyServidor.TestServerJeopardy.ILobbyOperation>, TestJeopardyServidor.TestServerJeopardy.ILobbyOperation {
        
        public LobbyOperationClient() {
        }
        
        public LobbyOperationClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LobbyOperationClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LobbyOperationClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LobbyOperationClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public JeopardyGame.Data.GenericClass<JeopardyGame.Data.PlayerInLobby[]> GetAllCurrentPlayerInLobby(int roomCode, int idUserRequesting) {
            return base.Channel.GetAllCurrentPlayerInLobby(roomCode, idUserRequesting);
        }
        
        public System.Threading.Tasks.Task<JeopardyGame.Data.GenericClass<JeopardyGame.Data.PlayerInLobby[]>> GetAllCurrentPlayerInLobbyAsync(int roomCode, int idUserRequesting) {
            return base.Channel.GetAllCurrentPlayerInLobbyAsync(roomCode, idUserRequesting);
        }
        
        public void DissolveLobby(int roomCode, int idUser) {
            base.Channel.DissolveLobby(roomCode, idUser);
        }
        
        public System.Threading.Tasks.Task DissolveLobbyAsync(int roomCode, int idUser) {
            return base.Channel.DissolveLobbyAsync(roomCode, idUser);
        }
        
        public void NotifyPlayerInLobby(int roomCode, int idUser) {
            base.Channel.NotifyPlayerInLobby(roomCode, idUser);
        }
        
        public System.Threading.Tasks.Task NotifyPlayerInLobbyAsync(int roomCode, int idUser) {
            return base.Channel.NotifyPlayerInLobbyAsync(roomCode, idUser);
        }
        
        public void LeaveLobby(int roomCode, int idUserLeaving) {
            base.Channel.LeaveLobby(roomCode, idUserLeaving);
        }
        
        public System.Threading.Tasks.Task LeaveLobbyAsync(int roomCode, int idUserLeaving) {
            return base.Channel.LeaveLobbyAsync(roomCode, idUserLeaving);
        }
        
        public void EliminatePlayerFromLobby(int roomCode, int idUserToEliminate) {
            base.Channel.EliminatePlayerFromLobby(roomCode, idUserToEliminate);
        }
        
        public System.Threading.Tasks.Task EliminatePlayerFromLobbyAsync(int roomCode, int idUserToEliminate) {
            return base.Channel.EliminatePlayerFromLobbyAsync(roomCode, idUserToEliminate);
        }
        
        public void SelectQuestionsForGame(int roomCode) {
            base.Channel.SelectQuestionsForGame(roomCode);
        }
        
        public System.Threading.Tasks.Task SelectQuestionsForGameAsync(int roomCode) {
            return base.Channel.SelectQuestionsForGameAsync(roomCode);
        }
        
        public void StartGame(int roomCode) {
            base.Channel.StartGame(roomCode);
        }
        
        public System.Threading.Tasks.Task StartGameAsync(int roomCode) {
            return base.Channel.StartGameAsync(roomCode);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TestServerJeopardy.ILiveChatService", CallbackContract=typeof(TestJeopardyServidor.TestServerJeopardy.ILiveChatServiceCallback))]
    public interface ILiveChatService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveChatService/CreateChatForLobby", ReplyAction="http://tempuri.org/ILiveChatService/CreateChatForLobbyResponse")]
        JeopardyGame.Data.GenericClass<bool> CreateChatForLobby(int roomCode, int idAdmin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveChatService/CreateChatForLobby", ReplyAction="http://tempuri.org/ILiveChatService/CreateChatForLobbyResponse")]
        System.Threading.Tasks.Task<JeopardyGame.Data.GenericClass<bool>> CreateChatForLobbyAsync(int roomCode, int idAdmin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveChatService/GetAllMessages", ReplyAction="http://tempuri.org/ILiveChatService/GetAllMessagesResponse")]
        JeopardyGame.Data.GenericClass<JeopardyGame.Data.MessageChat[]> GetAllMessages(int roomCode, int idUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveChatService/GetAllMessages", ReplyAction="http://tempuri.org/ILiveChatService/GetAllMessagesResponse")]
        System.Threading.Tasks.Task<JeopardyGame.Data.GenericClass<JeopardyGame.Data.MessageChat[]>> GetAllMessagesAsync(int roomCode, int idUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveChatService/RenewLiveChatCallBack", ReplyAction="http://tempuri.org/ILiveChatService/RenewLiveChatCallBackResponse")]
        int RenewLiveChatCallBack(int roomCode, int idUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveChatService/RenewLiveChatCallBack", ReplyAction="http://tempuri.org/ILiveChatService/RenewLiveChatCallBackResponse")]
        System.Threading.Tasks.Task<int> RenewLiveChatCallBackAsync(int roomCode, int idUser);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILiveChatServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveChatService/ReceiveMessage", ReplyAction="http://tempuri.org/ILiveChatService/ReceiveMessageResponse")]
        void ReceiveMessage(JeopardyGame.Data.GenericClass<JeopardyGame.Data.MessageChat> message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILiveChatServiceChannel : TestJeopardyServidor.TestServerJeopardy.ILiveChatService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LiveChatServiceClient : System.ServiceModel.DuplexClientBase<TestJeopardyServidor.TestServerJeopardy.ILiveChatService>, TestJeopardyServidor.TestServerJeopardy.ILiveChatService {
        
        public LiveChatServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public LiveChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public LiveChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public LiveChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public LiveChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public JeopardyGame.Data.GenericClass<bool> CreateChatForLobby(int roomCode, int idAdmin) {
            return base.Channel.CreateChatForLobby(roomCode, idAdmin);
        }
        
        public System.Threading.Tasks.Task<JeopardyGame.Data.GenericClass<bool>> CreateChatForLobbyAsync(int roomCode, int idAdmin) {
            return base.Channel.CreateChatForLobbyAsync(roomCode, idAdmin);
        }
        
        public JeopardyGame.Data.GenericClass<JeopardyGame.Data.MessageChat[]> GetAllMessages(int roomCode, int idUser) {
            return base.Channel.GetAllMessages(roomCode, idUser);
        }
        
        public System.Threading.Tasks.Task<JeopardyGame.Data.GenericClass<JeopardyGame.Data.MessageChat[]>> GetAllMessagesAsync(int roomCode, int idUser) {
            return base.Channel.GetAllMessagesAsync(roomCode, idUser);
        }
        
        public int RenewLiveChatCallBack(int roomCode, int idUser) {
            return base.Channel.RenewLiveChatCallBack(roomCode, idUser);
        }
        
        public System.Threading.Tasks.Task<int> RenewLiveChatCallBackAsync(int roomCode, int idUser) {
            return base.Channel.RenewLiveChatCallBackAsync(roomCode, idUser);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TestServerJeopardy.ILiveChatOperations")]
    public interface ILiveChatOperations {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILiveChatOperations/SendMessage")]
        void SendMessage(int idUser, int roomCode, string userName, string messageToSend);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILiveChatOperations/SendMessage")]
        System.Threading.Tasks.Task SendMessageAsync(int idUser, int roomCode, string userName, string messageToSend);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILiveChatOperations/DeleteChat")]
        void DeleteChat(int roomCode, int idUser);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILiveChatOperations/DeleteChat")]
        System.Threading.Tasks.Task DeleteChatAsync(int roomCode, int idUser);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILiveChatOperationsChannel : TestJeopardyServidor.TestServerJeopardy.ILiveChatOperations, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LiveChatOperationsClient : System.ServiceModel.ClientBase<TestJeopardyServidor.TestServerJeopardy.ILiveChatOperations>, TestJeopardyServidor.TestServerJeopardy.ILiveChatOperations {
        
        public LiveChatOperationsClient() {
        }
        
        public LiveChatOperationsClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LiveChatOperationsClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LiveChatOperationsClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LiveChatOperationsClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void SendMessage(int idUser, int roomCode, string userName, string messageToSend) {
            base.Channel.SendMessage(idUser, roomCode, userName, messageToSend);
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(int idUser, int roomCode, string userName, string messageToSend) {
            return base.Channel.SendMessageAsync(idUser, roomCode, userName, messageToSend);
        }
        
        public void DeleteChat(int roomCode, int idUser) {
            base.Channel.DeleteChat(roomCode, idUser);
        }
        
        public System.Threading.Tasks.Task DeleteChatAsync(int roomCode, int idUser) {
            return base.Channel.DeleteChatAsync(roomCode, idUser);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TestServerJeopardy.IGameService", CallbackContract=typeof(TestJeopardyServidor.TestServerJeopardy.IGameServiceCallback))]
    public interface IGameService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/SubscribeToGameCallBack")]
        void SubscribeToGameCallBack(int roomCode, int idUserSubscribing, int idAvatar);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/SubscribeToGameCallBack")]
        System.Threading.Tasks.Task SubscribeToGameCallBackAsync(int roomCode, int idUserSubscribing, int idAvatar);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/RenewGameCallBack", ReplyAction="http://tempuri.org/IGameService/RenewGameCallBackResponse")]
        int RenewGameCallBack(int roomCode, int idUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/RenewGameCallBack", ReplyAction="http://tempuri.org/IGameService/RenewGameCallBackResponse")]
        System.Threading.Tasks.Task<int> RenewGameCallBackAsync(int roomCode, int idUser);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/ReceiveNotificationEverybodyIsPlaying")]
        void ReceiveNotificationEverybodyIsPlaying(int idHost, int isYourTurn, JeopardyGame.Data.PlayerInGameDataContract[] playerInGame);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/ReceiveNotificationSomeOneLeft")]
        void ReceiveNotificationSomeOneLeft(int isYourTurn, JeopardyGame.Data.PlayerInGameDataContract[] playerInGame);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameService/ReceiveNotificationAboutTurn", ReplyAction="http://tempuri.org/IGameService/ReceiveNotificationAboutTurnResponse")]
        void ReceiveNotificationAboutTurn(int isYourTurn);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/ResponseSomeOneSelectAQuestion")]
        void ResponseSomeOneSelectAQuestion(JeopardyGame.Data.CurrentQuestionToShowContract questionToShow, int currentRound, int idUser);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/ResponseSomeOneChooseAnAnswer")]
        void ResponseSomeOneChooseAnAnswer(int idAnswerSelected, int idUserAnswering, int pointsWorth);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/ResponseBeginRound")]
        void ResponseBeginRound(int isYourTurn, int roundToStart, JeopardyGame.Data.PlayerInGameDataContract[] playerInGam);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/ResponseShowWinner")]
        void ResponseShowWinner(JeopardyGame.Data.PlayerInGameDataContract[] playerInGame, int poinstWereSaved);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameService/ResponseShowLastQuestion")]
        void ResponseShowLastQuestion();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameServiceChannel : TestJeopardyServidor.TestServerJeopardy.IGameService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GameServiceClient : System.ServiceModel.DuplexClientBase<TestJeopardyServidor.TestServerJeopardy.IGameService>, TestJeopardyServidor.TestServerJeopardy.IGameService {
        
        public GameServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public GameServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public GameServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void SubscribeToGameCallBack(int roomCode, int idUserSubscribing, int idAvatar) {
            base.Channel.SubscribeToGameCallBack(roomCode, idUserSubscribing, idAvatar);
        }
        
        public System.Threading.Tasks.Task SubscribeToGameCallBackAsync(int roomCode, int idUserSubscribing, int idAvatar) {
            return base.Channel.SubscribeToGameCallBackAsync(roomCode, idUserSubscribing, idAvatar);
        }
        
        public int RenewGameCallBack(int roomCode, int idUser) {
            return base.Channel.RenewGameCallBack(roomCode, idUser);
        }
        
        public System.Threading.Tasks.Task<int> RenewGameCallBackAsync(int roomCode, int idUser) {
            return base.Channel.RenewGameCallBackAsync(roomCode, idUser);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TestServerJeopardy.IGameOperations")]
    public interface IGameOperations {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameOperations/UnSubscribeFromGameCallBack")]
        void UnSubscribeFromGameCallBack(int roomCode, int idUserUnsubscribing);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameOperations/UnSubscribeFromGameCallBack")]
        System.Threading.Tasks.Task UnSubscribeFromGameCallBackAsync(int roomCode, int idUserUnsubscribing);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameOperations/ChooseQuestionOfBoard")]
        void ChooseQuestionOfBoard(int roomCode, int idUserSelecting, int currentRound, JeopardyGame.Data.CurrentQuestionToShowContract questionToShow);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameOperations/ChooseQuestionOfBoard")]
        System.Threading.Tasks.Task ChooseQuestionOfBoardAsync(int roomCode, int idUserSelecting, int currentRound, JeopardyGame.Data.CurrentQuestionToShowContract questionToShow);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameOperations/ChooseAnswer")]
        void ChooseAnswer(int roomCode, int idUserSelecting, int answerSelected, int pointsWorth, int currentTurn);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameOperations/ChooseAnswer")]
        System.Threading.Tasks.Task ChooseAnswerAsync(int roomCode, int idUserSelecting, int answerSelected, int pointsWorth, int currentTurn);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameOperations/FinishRound")]
        void FinishRound(int roomCode, JeopardyGame.Data.PlayerInGameDataContract[] playerInGame, int roundFinished);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameOperations/FinishRound")]
        System.Threading.Tasks.Task FinishRoundAsync(int roomCode, JeopardyGame.Data.PlayerInGameDataContract[] playerInGame, int roundFinished);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameOperations/ConfirmBet")]
        void ConfirmBet(int roomCode, int idUser);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameOperations/ConfirmBet")]
        System.Threading.Tasks.Task ConfirmBetAsync(int roomCode, int idUser);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameOperations/ConfirmLastQuestionAnswer")]
        void ConfirmLastQuestionAnswer(int roomCode, JeopardyGame.Data.PlayerInGameDataContract playerAnswering, int points, bool isCorrect);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGameOperations/ConfirmLastQuestionAnswer")]
        System.Threading.Tasks.Task ConfirmLastQuestionAnswerAsync(int roomCode, JeopardyGame.Data.PlayerInGameDataContract playerAnswering, int points, bool isCorrect);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameOperationsChannel : TestJeopardyServidor.TestServerJeopardy.IGameOperations, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GameOperationsClient : System.ServiceModel.ClientBase<TestJeopardyServidor.TestServerJeopardy.IGameOperations>, TestJeopardyServidor.TestServerJeopardy.IGameOperations {
        
        public GameOperationsClient() {
        }
        
        public GameOperationsClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GameOperationsClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GameOperationsClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GameOperationsClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void UnSubscribeFromGameCallBack(int roomCode, int idUserUnsubscribing) {
            base.Channel.UnSubscribeFromGameCallBack(roomCode, idUserUnsubscribing);
        }
        
        public System.Threading.Tasks.Task UnSubscribeFromGameCallBackAsync(int roomCode, int idUserUnsubscribing) {
            return base.Channel.UnSubscribeFromGameCallBackAsync(roomCode, idUserUnsubscribing);
        }
        
        public void ChooseQuestionOfBoard(int roomCode, int idUserSelecting, int currentRound, JeopardyGame.Data.CurrentQuestionToShowContract questionToShow) {
            base.Channel.ChooseQuestionOfBoard(roomCode, idUserSelecting, currentRound, questionToShow);
        }
        
        public System.Threading.Tasks.Task ChooseQuestionOfBoardAsync(int roomCode, int idUserSelecting, int currentRound, JeopardyGame.Data.CurrentQuestionToShowContract questionToShow) {
            return base.Channel.ChooseQuestionOfBoardAsync(roomCode, idUserSelecting, currentRound, questionToShow);
        }
        
        public void ChooseAnswer(int roomCode, int idUserSelecting, int answerSelected, int pointsWorth, int currentTurn) {
            base.Channel.ChooseAnswer(roomCode, idUserSelecting, answerSelected, pointsWorth, currentTurn);
        }
        
        public System.Threading.Tasks.Task ChooseAnswerAsync(int roomCode, int idUserSelecting, int answerSelected, int pointsWorth, int currentTurn) {
            return base.Channel.ChooseAnswerAsync(roomCode, idUserSelecting, answerSelected, pointsWorth, currentTurn);
        }
        
        public void FinishRound(int roomCode, JeopardyGame.Data.PlayerInGameDataContract[] playerInGame, int roundFinished) {
            base.Channel.FinishRound(roomCode, playerInGame, roundFinished);
        }
        
        public System.Threading.Tasks.Task FinishRoundAsync(int roomCode, JeopardyGame.Data.PlayerInGameDataContract[] playerInGame, int roundFinished) {
            return base.Channel.FinishRoundAsync(roomCode, playerInGame, roundFinished);
        }
        
        public void ConfirmBet(int roomCode, int idUser) {
            base.Channel.ConfirmBet(roomCode, idUser);
        }
        
        public System.Threading.Tasks.Task ConfirmBetAsync(int roomCode, int idUser) {
            return base.Channel.ConfirmBetAsync(roomCode, idUser);
        }
        
        public void ConfirmLastQuestionAnswer(int roomCode, JeopardyGame.Data.PlayerInGameDataContract playerAnswering, int points, bool isCorrect) {
            base.Channel.ConfirmLastQuestionAnswer(roomCode, playerAnswering, points, isCorrect);
        }
        
        public System.Threading.Tasks.Task ConfirmLastQuestionAnswerAsync(int roomCode, JeopardyGame.Data.PlayerInGameDataContract playerAnswering, int points, bool isCorrect) {
            return base.Channel.ConfirmLastQuestionAnswerAsync(roomCode, playerAnswering, points, isCorrect);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TestServerJeopardy.IUserManager")]
    public interface IUserManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/SaveUser", ReplyAction="http://tempuri.org/IUserManager/SaveUserResponse")]
        JeopardyGame.Data.GenericClass<int> SaveUser(JeopardyGame.Data.UserPojo userPojoNew, string codeEntered);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/SaveUser", ReplyAction="http://tempuri.org/IUserManager/SaveUserResponse")]
        System.Threading.Tasks.Task<JeopardyGame.Data.GenericClass<int>> SaveUserAsync(JeopardyGame.Data.UserPojo userPojoNew, string codeEntered);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/UpdateUserInformation", ReplyAction="http://tempuri.org/IUserManager/UpdateUserInformationResponse")]
        JeopardyGame.Data.GenericClass<int> UpdateUserInformation(int idUser, string editedName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/UpdateUserInformation", ReplyAction="http://tempuri.org/IUserManager/UpdateUserInformationResponse")]
        System.Threading.Tasks.Task<JeopardyGame.Data.GenericClass<int>> UpdateUserInformationAsync(int idUser, string editedName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/UpdatePlayerPhoto", ReplyAction="http://tempuri.org/IUserManager/UpdatePlayerPhotoResponse")]
        JeopardyGame.Data.GenericClass<int> UpdatePlayerPhoto(int idPlayer, int imageId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/UpdatePlayerPhoto", ReplyAction="http://tempuri.org/IUserManager/UpdatePlayerPhotoResponse")]
        System.Threading.Tasks.Task<JeopardyGame.Data.GenericClass<int>> UpdatePlayerPhotoAsync(int idPlayer, int imageId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/UpdateEmailUser", ReplyAction="http://tempuri.org/IUserManager/UpdateEmailUserResponse")]
        JeopardyGame.Data.GenericClass<int> UpdateEmailUser(int idUser, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/UpdateEmailUser", ReplyAction="http://tempuri.org/IUserManager/UpdateEmailUserResponse")]
        System.Threading.Tasks.Task<JeopardyGame.Data.GenericClass<int>> UpdateEmailUserAsync(int idUser, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/UpdatePasswordUser", ReplyAction="http://tempuri.org/IUserManager/UpdatePasswordUserResponse")]
        JeopardyGame.Data.GenericClass<int> UpdatePasswordUser(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserManager/UpdatePasswordUser", ReplyAction="http://tempuri.org/IUserManager/UpdatePasswordUserResponse")]
        System.Threading.Tasks.Task<JeopardyGame.Data.GenericClass<int>> UpdatePasswordUserAsync(string userName, string password);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserManagerChannel : TestJeopardyServidor.TestServerJeopardy.IUserManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserManagerClient : System.ServiceModel.ClientBase<TestJeopardyServidor.TestServerJeopardy.IUserManager>, TestJeopardyServidor.TestServerJeopardy.IUserManager {
        
        public UserManagerClient() {
        }
        
        public UserManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public JeopardyGame.Data.GenericClass<int> SaveUser(JeopardyGame.Data.UserPojo userPojoNew, string codeEntered) {
            return base.Channel.SaveUser(userPojoNew, codeEntered);
        }
        
        public System.Threading.Tasks.Task<JeopardyGame.Data.GenericClass<int>> SaveUserAsync(JeopardyGame.Data.UserPojo userPojoNew, string codeEntered) {
            return base.Channel.SaveUserAsync(userPojoNew, codeEntered);
        }
        
        public JeopardyGame.Data.GenericClass<int> UpdateUserInformation(int idUser, string editedName) {
            return base.Channel.UpdateUserInformation(idUser, editedName);
        }
        
        public System.Threading.Tasks.Task<JeopardyGame.Data.GenericClass<int>> UpdateUserInformationAsync(int idUser, string editedName) {
            return base.Channel.UpdateUserInformationAsync(idUser, editedName);
        }
        
        public JeopardyGame.Data.GenericClass<int> UpdatePlayerPhoto(int idPlayer, int imageId) {
            return base.Channel.UpdatePlayerPhoto(idPlayer, imageId);
        }
        
        public System.Threading.Tasks.Task<JeopardyGame.Data.GenericClass<int>> UpdatePlayerPhotoAsync(int idPlayer, int imageId) {
            return base.Channel.UpdatePlayerPhotoAsync(idPlayer, imageId);
        }
        
        public JeopardyGame.Data.GenericClass<int> UpdateEmailUser(int idUser, string email) {
            return base.Channel.UpdateEmailUser(idUser, email);
        }
        
        public System.Threading.Tasks.Task<JeopardyGame.Data.GenericClass<int>> UpdateEmailUserAsync(int idUser, string email) {
            return base.Channel.UpdateEmailUserAsync(idUser, email);
        }
        
        public JeopardyGame.Data.GenericClass<int> UpdatePasswordUser(string userName, string password) {
            return base.Channel.UpdatePasswordUser(userName, password);
        }
        
        public System.Threading.Tasks.Task<JeopardyGame.Data.GenericClass<int>> UpdatePasswordUserAsync(string userName, string password) {
            return base.Channel.UpdatePasswordUserAsync(userName, password);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TestServerJeopardy.ILogInVerification")]
    public interface ILogInVerification {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogInVerification/ValidateCredentials", ReplyAction="http://tempuri.org/ILogInVerification/ValidateCredentialsResponse")]
        JeopardyGame.Data.GenericClass<int> ValidateCredentials(JeopardyGame.Data.UserValidate newUserValidate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogInVerification/ValidateCredentials", ReplyAction="http://tempuri.org/ILogInVerification/ValidateCredentialsResponse")]
        System.Threading.Tasks.Task<JeopardyGame.Data.GenericClass<int>> ValidateCredentialsAsync(JeopardyGame.Data.UserValidate newUserValidate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogInVerification/ValidateThereIsOnlyOneAActiveAccount", ReplyAction="http://tempuri.org/ILogInVerification/ValidateThereIsOnlyOneAActiveAccountRespons" +
            "e")]
        int ValidateThereIsOnlyOneAActiveAccount(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogInVerification/ValidateThereIsOnlyOneAActiveAccount", ReplyAction="http://tempuri.org/ILogInVerification/ValidateThereIsOnlyOneAActiveAccountRespons" +
            "e")]
        System.Threading.Tasks.Task<int> ValidateThereIsOnlyOneAActiveAccountAsync(string userName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILogInVerificationChannel : TestJeopardyServidor.TestServerJeopardy.ILogInVerification, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LogInVerificationClient : System.ServiceModel.ClientBase<TestJeopardyServidor.TestServerJeopardy.ILogInVerification>, TestJeopardyServidor.TestServerJeopardy.ILogInVerification {
        
        public LogInVerificationClient() {
        }
        
        public LogInVerificationClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LogInVerificationClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LogInVerificationClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LogInVerificationClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public JeopardyGame.Data.GenericClass<int> ValidateCredentials(JeopardyGame.Data.UserValidate newUserValidate) {
            return base.Channel.ValidateCredentials(newUserValidate);
        }
        
        public System.Threading.Tasks.Task<JeopardyGame.Data.GenericClass<int>> ValidateCredentialsAsync(JeopardyGame.Data.UserValidate newUserValidate) {
            return base.Channel.ValidateCredentialsAsync(newUserValidate);
        }
        
        public int ValidateThereIsOnlyOneAActiveAccount(string userName) {
            return base.Channel.ValidateThereIsOnlyOneAActiveAccount(userName);
        }
        
        public System.Threading.Tasks.Task<int> ValidateThereIsOnlyOneAActiveAccountAsync(string userName) {
            return base.Channel.ValidateThereIsOnlyOneAActiveAccountAsync(userName);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TestServerJeopardy.IEmailSenderManager")]
    public interface IEmailSenderManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmailSenderManager/SentEmailConfirmationToCreateAccount", ReplyAction="http://tempuri.org/IEmailSenderManager/SentEmailConfirmationToCreateAccountRespon" +
            "se")]
        JeopardyGame.Data.GenericClass<int> SentEmailConfirmationToCreateAccount(JeopardyGame.Data.UserPojo user, string subject, string bodyMessage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmailSenderManager/SentEmailConfirmationToCreateAccount", ReplyAction="http://tempuri.org/IEmailSenderManager/SentEmailConfirmationToCreateAccountRespon" +
            "se")]
        System.Threading.Tasks.Task<JeopardyGame.Data.GenericClass<int>> SentEmailConfirmationToCreateAccountAsync(JeopardyGame.Data.UserPojo user, string subject, string bodyMessage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmailSenderManager/SentEmailInvitingToGame", ReplyAction="http://tempuri.org/IEmailSenderManager/SentEmailInvitingToGameResponse")]
        JeopardyGame.Data.GenericClass<int> SentEmailInvitingToGame(JeopardyGame.Data.UserPojo user, string subject, string bodyMessage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmailSenderManager/SentEmailInvitingToGame", ReplyAction="http://tempuri.org/IEmailSenderManager/SentEmailInvitingToGameResponse")]
        System.Threading.Tasks.Task<JeopardyGame.Data.GenericClass<int>> SentEmailInvitingToGameAsync(JeopardyGame.Data.UserPojo user, string subject, string bodyMessage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmailSenderManager/SentEmailForInvitation", ReplyAction="http://tempuri.org/IEmailSenderManager/SentEmailForInvitationResponse")]
        JeopardyGame.Data.GenericClass<int> SentEmailForInvitation(string email, string subject, string bodyMessage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEmailSenderManager/SentEmailForInvitation", ReplyAction="http://tempuri.org/IEmailSenderManager/SentEmailForInvitationResponse")]
        System.Threading.Tasks.Task<JeopardyGame.Data.GenericClass<int>> SentEmailForInvitationAsync(string email, string subject, string bodyMessage);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEmailSenderManagerChannel : TestJeopardyServidor.TestServerJeopardy.IEmailSenderManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EmailSenderManagerClient : System.ServiceModel.ClientBase<TestJeopardyServidor.TestServerJeopardy.IEmailSenderManager>, TestJeopardyServidor.TestServerJeopardy.IEmailSenderManager {
        
        public EmailSenderManagerClient() {
        }
        
        public EmailSenderManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EmailSenderManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EmailSenderManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EmailSenderManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public JeopardyGame.Data.GenericClass<int> SentEmailConfirmationToCreateAccount(JeopardyGame.Data.UserPojo user, string subject, string bodyMessage) {
            return base.Channel.SentEmailConfirmationToCreateAccount(user, subject, bodyMessage);
        }
        
        public System.Threading.Tasks.Task<JeopardyGame.Data.GenericClass<int>> SentEmailConfirmationToCreateAccountAsync(JeopardyGame.Data.UserPojo user, string subject, string bodyMessage) {
            return base.Channel.SentEmailConfirmationToCreateAccountAsync(user, subject, bodyMessage);
        }
        
        public JeopardyGame.Data.GenericClass<int> SentEmailInvitingToGame(JeopardyGame.Data.UserPojo user, string subject, string bodyMessage) {
            return base.Channel.SentEmailInvitingToGame(user, subject, bodyMessage);
        }
        
        public System.Threading.Tasks.Task<JeopardyGame.Data.GenericClass<int>> SentEmailInvitingToGameAsync(JeopardyGame.Data.UserPojo user, string subject, string bodyMessage) {
            return base.Channel.SentEmailInvitingToGameAsync(user, subject, bodyMessage);
        }
        
        public JeopardyGame.Data.GenericClass<int> SentEmailForInvitation(string email, string subject, string bodyMessage) {
            return base.Channel.SentEmailForInvitation(email, subject, bodyMessage);
        }
        
        public System.Threading.Tasks.Task<JeopardyGame.Data.GenericClass<int>> SentEmailForInvitationAsync(string email, string subject, string bodyMessage) {
            return base.Channel.SentEmailForInvitationAsync(email, subject, bodyMessage);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TestServerJeopardy.IUserCreateAccountCode")]
    public interface IUserCreateAccountCode {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserCreateAccountCode/AddUserToConfirmationDictionary", ReplyAction="http://tempuri.org/IUserCreateAccountCode/AddUserToConfirmationDictionaryResponse" +
            "")]
        JeopardyGame.Data.GenericClass<int> AddUserToConfirmationDictionary(JeopardyGame.Data.UserPojo newUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserCreateAccountCode/AddUserToConfirmationDictionary", ReplyAction="http://tempuri.org/IUserCreateAccountCode/AddUserToConfirmationDictionaryResponse" +
            "")]
        System.Threading.Tasks.Task<JeopardyGame.Data.GenericClass<int>> AddUserToConfirmationDictionaryAsync(JeopardyGame.Data.UserPojo newUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserCreateAccountCode/CheckCodeEntered", ReplyAction="http://tempuri.org/IUserCreateAccountCode/CheckCodeEnteredResponse")]
        int CheckCodeEntered(JeopardyGame.Data.UserPojo newUser, string codeEntered);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserCreateAccountCode/CheckCodeEntered", ReplyAction="http://tempuri.org/IUserCreateAccountCode/CheckCodeEnteredResponse")]
        System.Threading.Tasks.Task<int> CheckCodeEnteredAsync(JeopardyGame.Data.UserPojo newUser, string codeEntered);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserCreateAccountCode/ResendCode", ReplyAction="http://tempuri.org/IUserCreateAccountCode/ResendCodeResponse")]
        int ResendCode(JeopardyGame.Data.UserPojo user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserCreateAccountCode/ResendCode", ReplyAction="http://tempuri.org/IUserCreateAccountCode/ResendCodeResponse")]
        System.Threading.Tasks.Task<int> ResendCodeAsync(JeopardyGame.Data.UserPojo user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserCreateAccountCode/TakeUserOutOfDictionary", ReplyAction="http://tempuri.org/IUserCreateAccountCode/TakeUserOutOfDictionaryResponse")]
        void TakeUserOutOfDictionary(JeopardyGame.Data.UserPojo user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserCreateAccountCode/TakeUserOutOfDictionary", ReplyAction="http://tempuri.org/IUserCreateAccountCode/TakeUserOutOfDictionaryResponse")]
        System.Threading.Tasks.Task TakeUserOutOfDictionaryAsync(JeopardyGame.Data.UserPojo user);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserCreateAccountCodeChannel : TestJeopardyServidor.TestServerJeopardy.IUserCreateAccountCode, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserCreateAccountCodeClient : System.ServiceModel.ClientBase<TestJeopardyServidor.TestServerJeopardy.IUserCreateAccountCode>, TestJeopardyServidor.TestServerJeopardy.IUserCreateAccountCode {
        
        public UserCreateAccountCodeClient() {
        }
        
        public UserCreateAccountCodeClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserCreateAccountCodeClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserCreateAccountCodeClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserCreateAccountCodeClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public JeopardyGame.Data.GenericClass<int> AddUserToConfirmationDictionary(JeopardyGame.Data.UserPojo newUser) {
            return base.Channel.AddUserToConfirmationDictionary(newUser);
        }
        
        public System.Threading.Tasks.Task<JeopardyGame.Data.GenericClass<int>> AddUserToConfirmationDictionaryAsync(JeopardyGame.Data.UserPojo newUser) {
            return base.Channel.AddUserToConfirmationDictionaryAsync(newUser);
        }
        
        public int CheckCodeEntered(JeopardyGame.Data.UserPojo newUser, string codeEntered) {
            return base.Channel.CheckCodeEntered(newUser, codeEntered);
        }
        
        public System.Threading.Tasks.Task<int> CheckCodeEnteredAsync(JeopardyGame.Data.UserPojo newUser, string codeEntered) {
            return base.Channel.CheckCodeEnteredAsync(newUser, codeEntered);
        }
        
        public int ResendCode(JeopardyGame.Data.UserPojo user) {
            return base.Channel.ResendCode(user);
        }
        
        public System.Threading.Tasks.Task<int> ResendCodeAsync(JeopardyGame.Data.UserPojo user) {
            return base.Channel.ResendCodeAsync(user);
        }
        
        public void TakeUserOutOfDictionary(JeopardyGame.Data.UserPojo user) {
            base.Channel.TakeUserOutOfDictionary(user);
        }
        
        public System.Threading.Tasks.Task TakeUserOutOfDictionaryAsync(JeopardyGame.Data.UserPojo user) {
            return base.Channel.TakeUserOutOfDictionaryAsync(user);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TestServerJeopardy.IConsultFriends")]
    public interface IConsultFriends {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConsultFriends/GetUserFriends", ReplyAction="http://tempuri.org/IConsultFriends/GetUserFriendsResponse")]
        JeopardyGame.Data.GenericClass<JeopardyGame.Data.FriendBasicInformation[]> GetUserFriends(JeopardyGame.Data.UserPojo user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConsultFriends/GetUserFriends", ReplyAction="http://tempuri.org/IConsultFriends/GetUserFriendsResponse")]
        System.Threading.Tasks.Task<JeopardyGame.Data.GenericClass<JeopardyGame.Data.FriendBasicInformation[]>> GetUserFriendsAsync(JeopardyGame.Data.UserPojo user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConsultFriends/GetUserFriendRequests", ReplyAction="http://tempuri.org/IConsultFriends/GetUserFriendRequestsResponse")]
        JeopardyGame.Data.GenericClass<JeopardyGame.Data.FriendBasicInformation[]> GetUserFriendRequests(JeopardyGame.Data.UserPojo user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConsultFriends/GetUserFriendRequests", ReplyAction="http://tempuri.org/IConsultFriends/GetUserFriendRequestsResponse")]
        System.Threading.Tasks.Task<JeopardyGame.Data.GenericClass<JeopardyGame.Data.FriendBasicInformation[]>> GetUserFriendRequestsAsync(JeopardyGame.Data.UserPojo user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConsultFriends/GetUsersNotFriends", ReplyAction="http://tempuri.org/IConsultFriends/GetUsersNotFriendsResponse")]
        JeopardyGame.Data.GenericClass<JeopardyGame.Data.FriendBasicInformation[]> GetUsersNotFriends(JeopardyGame.Data.UserPojo user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConsultFriends/GetUsersNotFriends", ReplyAction="http://tempuri.org/IConsultFriends/GetUsersNotFriendsResponse")]
        System.Threading.Tasks.Task<JeopardyGame.Data.GenericClass<JeopardyGame.Data.FriendBasicInformation[]>> GetUsersNotFriendsAsync(JeopardyGame.Data.UserPojo user);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IConsultFriendsChannel : TestJeopardyServidor.TestServerJeopardy.IConsultFriends, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ConsultFriendsClient : System.ServiceModel.ClientBase<TestJeopardyServidor.TestServerJeopardy.IConsultFriends>, TestJeopardyServidor.TestServerJeopardy.IConsultFriends {
        
        public ConsultFriendsClient() {
        }
        
        public ConsultFriendsClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ConsultFriendsClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ConsultFriendsClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ConsultFriendsClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public JeopardyGame.Data.GenericClass<JeopardyGame.Data.FriendBasicInformation[]> GetUserFriends(JeopardyGame.Data.UserPojo user) {
            return base.Channel.GetUserFriends(user);
        }
        
        public System.Threading.Tasks.Task<JeopardyGame.Data.GenericClass<JeopardyGame.Data.FriendBasicInformation[]>> GetUserFriendsAsync(JeopardyGame.Data.UserPojo user) {
            return base.Channel.GetUserFriendsAsync(user);
        }
        
        public JeopardyGame.Data.GenericClass<JeopardyGame.Data.FriendBasicInformation[]> GetUserFriendRequests(JeopardyGame.Data.UserPojo user) {
            return base.Channel.GetUserFriendRequests(user);
        }
        
        public System.Threading.Tasks.Task<JeopardyGame.Data.GenericClass<JeopardyGame.Data.FriendBasicInformation[]>> GetUserFriendRequestsAsync(JeopardyGame.Data.UserPojo user) {
            return base.Channel.GetUserFriendRequestsAsync(user);
        }
        
        public JeopardyGame.Data.GenericClass<JeopardyGame.Data.FriendBasicInformation[]> GetUsersNotFriends(JeopardyGame.Data.UserPojo user) {
            return base.Channel.GetUsersNotFriends(user);
        }
        
        public System.Threading.Tasks.Task<JeopardyGame.Data.GenericClass<JeopardyGame.Data.FriendBasicInformation[]>> GetUsersNotFriendsAsync(JeopardyGame.Data.UserPojo user) {
            return base.Channel.GetUsersNotFriendsAsync(user);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TestServerJeopardy.IConsultUserInformation")]
    public interface IConsultUserInformation {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConsultUserInformation/ConsultUserById", ReplyAction="http://tempuri.org/IConsultUserInformation/ConsultUserByIdResponse")]
        JeopardyGame.Data.GenericClass<JeopardyGame.Data.UserPojo> ConsultUserById(int idUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConsultUserInformation/ConsultUserById", ReplyAction="http://tempuri.org/IConsultUserInformation/ConsultUserByIdResponse")]
        System.Threading.Tasks.Task<JeopardyGame.Data.GenericClass<JeopardyGame.Data.UserPojo>> ConsultUserByIdAsync(int idUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConsultUserInformation/ConsultUserByIdPlayer", ReplyAction="http://tempuri.org/IConsultUserInformation/ConsultUserByIdPlayerResponse")]
        JeopardyGame.Data.GenericClass<JeopardyGame.Data.UserPojo> ConsultUserByIdPlayer(int idPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConsultUserInformation/ConsultUserByIdPlayer", ReplyAction="http://tempuri.org/IConsultUserInformation/ConsultUserByIdPlayerResponse")]
        System.Threading.Tasks.Task<JeopardyGame.Data.GenericClass<JeopardyGame.Data.UserPojo>> ConsultUserByIdPlayerAsync(int idPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConsultUserInformation/ConsultPlayerById", ReplyAction="http://tempuri.org/IConsultUserInformation/ConsultPlayerByIdResponse")]
        JeopardyGame.Data.GenericClass<JeopardyGame.Data.PlayerPojo> ConsultPlayerById(int idPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConsultUserInformation/ConsultPlayerById", ReplyAction="http://tempuri.org/IConsultUserInformation/ConsultPlayerByIdResponse")]
        System.Threading.Tasks.Task<JeopardyGame.Data.GenericClass<JeopardyGame.Data.PlayerPojo>> ConsultPlayerByIdAsync(int idPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConsultUserInformation/ConsultPlayerByIdUser", ReplyAction="http://tempuri.org/IConsultUserInformation/ConsultPlayerByIdUserResponse")]
        JeopardyGame.Data.GenericClass<JeopardyGame.Data.PlayerPojo> ConsultPlayerByIdUser(int idUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConsultUserInformation/ConsultPlayerByIdUser", ReplyAction="http://tempuri.org/IConsultUserInformation/ConsultPlayerByIdUserResponse")]
        System.Threading.Tasks.Task<JeopardyGame.Data.GenericClass<JeopardyGame.Data.PlayerPojo>> ConsultPlayerByIdUserAsync(int idUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConsultUserInformation/ConsultUserByUserName", ReplyAction="http://tempuri.org/IConsultUserInformation/ConsultUserByUserNameResponse")]
        JeopardyGame.Data.GenericClass<JeopardyGame.Data.UserPojo> ConsultUserByUserName(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConsultUserInformation/ConsultUserByUserName", ReplyAction="http://tempuri.org/IConsultUserInformation/ConsultUserByUserNameResponse")]
        System.Threading.Tasks.Task<JeopardyGame.Data.GenericClass<JeopardyGame.Data.UserPojo>> ConsultUserByUserNameAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConsultUserInformation/GetPlayersInformation", ReplyAction="http://tempuri.org/IConsultUserInformation/GetPlayersInformationResponse")]
        JeopardyGame.Data.GenericClass<JeopardyGame.Data.PlayerInfo[]> GetPlayersInformation(int idUserConsulting);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConsultUserInformation/GetPlayersInformation", ReplyAction="http://tempuri.org/IConsultUserInformation/GetPlayersInformationResponse")]
        System.Threading.Tasks.Task<JeopardyGame.Data.GenericClass<JeopardyGame.Data.PlayerInfo[]>> GetPlayersInformationAsync(int idUserConsulting);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IConsultUserInformationChannel : TestJeopardyServidor.TestServerJeopardy.IConsultUserInformation, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ConsultUserInformationClient : System.ServiceModel.ClientBase<TestJeopardyServidor.TestServerJeopardy.IConsultUserInformation>, TestJeopardyServidor.TestServerJeopardy.IConsultUserInformation {
        
        public ConsultUserInformationClient() {
        }
        
        public ConsultUserInformationClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ConsultUserInformationClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ConsultUserInformationClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ConsultUserInformationClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public JeopardyGame.Data.GenericClass<JeopardyGame.Data.UserPojo> ConsultUserById(int idUser) {
            return base.Channel.ConsultUserById(idUser);
        }
        
        public System.Threading.Tasks.Task<JeopardyGame.Data.GenericClass<JeopardyGame.Data.UserPojo>> ConsultUserByIdAsync(int idUser) {
            return base.Channel.ConsultUserByIdAsync(idUser);
        }
        
        public JeopardyGame.Data.GenericClass<JeopardyGame.Data.UserPojo> ConsultUserByIdPlayer(int idPlayer) {
            return base.Channel.ConsultUserByIdPlayer(idPlayer);
        }
        
        public System.Threading.Tasks.Task<JeopardyGame.Data.GenericClass<JeopardyGame.Data.UserPojo>> ConsultUserByIdPlayerAsync(int idPlayer) {
            return base.Channel.ConsultUserByIdPlayerAsync(idPlayer);
        }
        
        public JeopardyGame.Data.GenericClass<JeopardyGame.Data.PlayerPojo> ConsultPlayerById(int idPlayer) {
            return base.Channel.ConsultPlayerById(idPlayer);
        }
        
        public System.Threading.Tasks.Task<JeopardyGame.Data.GenericClass<JeopardyGame.Data.PlayerPojo>> ConsultPlayerByIdAsync(int idPlayer) {
            return base.Channel.ConsultPlayerByIdAsync(idPlayer);
        }
        
        public JeopardyGame.Data.GenericClass<JeopardyGame.Data.PlayerPojo> ConsultPlayerByIdUser(int idUser) {
            return base.Channel.ConsultPlayerByIdUser(idUser);
        }
        
        public System.Threading.Tasks.Task<JeopardyGame.Data.GenericClass<JeopardyGame.Data.PlayerPojo>> ConsultPlayerByIdUserAsync(int idUser) {
            return base.Channel.ConsultPlayerByIdUserAsync(idUser);
        }
        
        public JeopardyGame.Data.GenericClass<JeopardyGame.Data.UserPojo> ConsultUserByUserName(string userName) {
            return base.Channel.ConsultUserByUserName(userName);
        }
        
        public System.Threading.Tasks.Task<JeopardyGame.Data.GenericClass<JeopardyGame.Data.UserPojo>> ConsultUserByUserNameAsync(string userName) {
            return base.Channel.ConsultUserByUserNameAsync(userName);
        }
        
        public JeopardyGame.Data.GenericClass<JeopardyGame.Data.PlayerInfo[]> GetPlayersInformation(int idUserConsulting) {
            return base.Channel.GetPlayersInformation(idUserConsulting);
        }
        
        public System.Threading.Tasks.Task<JeopardyGame.Data.GenericClass<JeopardyGame.Data.PlayerInfo[]>> GetPlayersInformationAsync(int idUserConsulting) {
            return base.Channel.GetPlayersInformationAsync(idUserConsulting);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TestServerJeopardy.IValidateUserExistance")]
    public interface IValidateUserExistance {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IValidateUserExistance/UserNameAlreadyExist", ReplyAction="http://tempuri.org/IValidateUserExistance/UserNameAlreadyExistResponse")]
        JeopardyGame.Data.GenericClass<int> UserNameAlreadyExist(JeopardyGame.Data.UserPojo newUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IValidateUserExistance/UserNameAlreadyExist", ReplyAction="http://tempuri.org/IValidateUserExistance/UserNameAlreadyExistResponse")]
        System.Threading.Tasks.Task<JeopardyGame.Data.GenericClass<int>> UserNameAlreadyExistAsync(JeopardyGame.Data.UserPojo newUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IValidateUserExistance/EmailAlreadyExist", ReplyAction="http://tempuri.org/IValidateUserExistance/EmailAlreadyExistResponse")]
        JeopardyGame.Data.GenericClass<int> EmailAlreadyExist(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IValidateUserExistance/EmailAlreadyExist", ReplyAction="http://tempuri.org/IValidateUserExistance/EmailAlreadyExistResponse")]
        System.Threading.Tasks.Task<JeopardyGame.Data.GenericClass<int>> EmailAlreadyExistAsync(string email);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IValidateUserExistanceChannel : TestJeopardyServidor.TestServerJeopardy.IValidateUserExistance, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ValidateUserExistanceClient : System.ServiceModel.ClientBase<TestJeopardyServidor.TestServerJeopardy.IValidateUserExistance>, TestJeopardyServidor.TestServerJeopardy.IValidateUserExistance {
        
        public ValidateUserExistanceClient() {
        }
        
        public ValidateUserExistanceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ValidateUserExistanceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ValidateUserExistanceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ValidateUserExistanceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public JeopardyGame.Data.GenericClass<int> UserNameAlreadyExist(JeopardyGame.Data.UserPojo newUser) {
            return base.Channel.UserNameAlreadyExist(newUser);
        }
        
        public System.Threading.Tasks.Task<JeopardyGame.Data.GenericClass<int>> UserNameAlreadyExistAsync(JeopardyGame.Data.UserPojo newUser) {
            return base.Channel.UserNameAlreadyExistAsync(newUser);
        }
        
        public JeopardyGame.Data.GenericClass<int> EmailAlreadyExist(string email) {
            return base.Channel.EmailAlreadyExist(email);
        }
        
        public System.Threading.Tasks.Task<JeopardyGame.Data.GenericClass<int>> EmailAlreadyExistAsync(string email) {
            return base.Channel.EmailAlreadyExistAsync(email);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TestServerJeopardy.ILobbyTeamsManager")]
    public interface ILobbyTeamsManager {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyTeamsManager/ChangePlayerSide")]
        void ChangePlayerSide(int roomCode, int idUserToChangeTeam, int newSideTeam);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyTeamsManager/ChangePlayerSide")]
        System.Threading.Tasks.Task ChangePlayerSideAsync(int roomCode, int idUserToChangeTeam, int newSideTeam);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyTeamsManager/MakeTeams")]
        void MakeTeams(int roomCode, int idUser, bool wannaTeam);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ILobbyTeamsManager/MakeTeams")]
        System.Threading.Tasks.Task MakeTeamsAsync(int roomCode, int idUser, bool wannaTeam);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILobbyTeamsManagerChannel : TestJeopardyServidor.TestServerJeopardy.ILobbyTeamsManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LobbyTeamsManagerClient : System.ServiceModel.ClientBase<TestJeopardyServidor.TestServerJeopardy.ILobbyTeamsManager>, TestJeopardyServidor.TestServerJeopardy.ILobbyTeamsManager {
        
        public LobbyTeamsManagerClient() {
        }
        
        public LobbyTeamsManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LobbyTeamsManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LobbyTeamsManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LobbyTeamsManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void ChangePlayerSide(int roomCode, int idUserToChangeTeam, int newSideTeam) {
            base.Channel.ChangePlayerSide(roomCode, idUserToChangeTeam, newSideTeam);
        }
        
        public System.Threading.Tasks.Task ChangePlayerSideAsync(int roomCode, int idUserToChangeTeam, int newSideTeam) {
            return base.Channel.ChangePlayerSideAsync(roomCode, idUserToChangeTeam, newSideTeam);
        }
        
        public void MakeTeams(int roomCode, int idUser, bool wannaTeam) {
            base.Channel.MakeTeams(roomCode, idUser, wannaTeam);
        }
        
        public System.Threading.Tasks.Task MakeTeamsAsync(int roomCode, int idUser, bool wannaTeam) {
            return base.Channel.MakeTeamsAsync(roomCode, idUser, wannaTeam);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TestServerJeopardy.ILobbyCodeAuthentication")]
    public interface ILobbyCodeAuthentication {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyCodeAuthentication/VerifyRoomCodeExist", ReplyAction="http://tempuri.org/ILobbyCodeAuthentication/VerifyRoomCodeExistResponse")]
        JeopardyGame.Data.GenericClass<int> VerifyRoomCodeExist(int roomCode, int idUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobbyCodeAuthentication/VerifyRoomCodeExist", ReplyAction="http://tempuri.org/ILobbyCodeAuthentication/VerifyRoomCodeExistResponse")]
        System.Threading.Tasks.Task<JeopardyGame.Data.GenericClass<int>> VerifyRoomCodeExistAsync(int roomCode, int idUser);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILobbyCodeAuthenticationChannel : TestJeopardyServidor.TestServerJeopardy.ILobbyCodeAuthentication, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LobbyCodeAuthenticationClient : System.ServiceModel.ClientBase<TestJeopardyServidor.TestServerJeopardy.ILobbyCodeAuthentication>, TestJeopardyServidor.TestServerJeopardy.ILobbyCodeAuthentication {
        
        public LobbyCodeAuthenticationClient() {
        }
        
        public LobbyCodeAuthenticationClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LobbyCodeAuthenticationClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LobbyCodeAuthenticationClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LobbyCodeAuthenticationClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public JeopardyGame.Data.GenericClass<int> VerifyRoomCodeExist(int roomCode, int idUser) {
            return base.Channel.VerifyRoomCodeExist(roomCode, idUser);
        }
        
        public System.Threading.Tasks.Task<JeopardyGame.Data.GenericClass<int>> VerifyRoomCodeExistAsync(int roomCode, int idUser) {
            return base.Channel.VerifyRoomCodeExistAsync(roomCode, idUser);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TestServerJeopardy.IGuestPlayerManager")]
    public interface IGuestPlayerManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGuestPlayerManager/CreateUserForGuest", ReplyAction="http://tempuri.org/IGuestPlayerManager/CreateUserForGuestResponse")]
        JeopardyGame.Data.GenericClass<JeopardyGame.Data.UserPojo> CreateUserForGuest();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGuestPlayerManager/CreateUserForGuest", ReplyAction="http://tempuri.org/IGuestPlayerManager/CreateUserForGuestResponse")]
        System.Threading.Tasks.Task<JeopardyGame.Data.GenericClass<JeopardyGame.Data.UserPojo>> CreateUserForGuestAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGuestPlayerManager/DeleteGuest")]
        void DeleteGuest(int idUser);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGuestPlayerManager/DeleteGuest")]
        System.Threading.Tasks.Task DeleteGuestAsync(int idUser);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGuestPlayerManagerChannel : TestJeopardyServidor.TestServerJeopardy.IGuestPlayerManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GuestPlayerManagerClient : System.ServiceModel.ClientBase<TestJeopardyServidor.TestServerJeopardy.IGuestPlayerManager>, TestJeopardyServidor.TestServerJeopardy.IGuestPlayerManager {
        
        public GuestPlayerManagerClient() {
        }
        
        public GuestPlayerManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GuestPlayerManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GuestPlayerManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GuestPlayerManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public JeopardyGame.Data.GenericClass<JeopardyGame.Data.UserPojo> CreateUserForGuest() {
            return base.Channel.CreateUserForGuest();
        }
        
        public System.Threading.Tasks.Task<JeopardyGame.Data.GenericClass<JeopardyGame.Data.UserPojo>> CreateUserForGuestAsync() {
            return base.Channel.CreateUserForGuestAsync();
        }
        
        public void DeleteGuest(int idUser) {
            base.Channel.DeleteGuest(idUser);
        }
        
        public System.Threading.Tasks.Task DeleteGuestAsync(int idUser) {
            return base.Channel.DeleteGuestAsync(idUser);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TestServerJeopardy.IRecoverPassword")]
    public interface IRecoverPassword {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecoverPassword/CreateCodeToRecoverPassWord", ReplyAction="http://tempuri.org/IRecoverPassword/CreateCodeToRecoverPassWordResponse")]
        int CreateCodeToRecoverPassWord(string userName, string emailTitle, string emailBody);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecoverPassword/CreateCodeToRecoverPassWord", ReplyAction="http://tempuri.org/IRecoverPassword/CreateCodeToRecoverPassWordResponse")]
        System.Threading.Tasks.Task<int> CreateCodeToRecoverPassWordAsync(string userName, string emailTitle, string emailBody);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecoverPassword/VerifyCodeToRecoverPassword", ReplyAction="http://tempuri.org/IRecoverPassword/VerifyCodeToRecoverPasswordResponse")]
        int VerifyCodeToRecoverPassword(string userName, string code);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRecoverPassword/VerifyCodeToRecoverPassword", ReplyAction="http://tempuri.org/IRecoverPassword/VerifyCodeToRecoverPasswordResponse")]
        System.Threading.Tasks.Task<int> VerifyCodeToRecoverPasswordAsync(string userName, string code);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRecoverPasswordChannel : TestJeopardyServidor.TestServerJeopardy.IRecoverPassword, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RecoverPasswordClient : System.ServiceModel.ClientBase<TestJeopardyServidor.TestServerJeopardy.IRecoverPassword>, TestJeopardyServidor.TestServerJeopardy.IRecoverPassword {
        
        public RecoverPasswordClient() {
        }
        
        public RecoverPasswordClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RecoverPasswordClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RecoverPasswordClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RecoverPasswordClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int CreateCodeToRecoverPassWord(string userName, string emailTitle, string emailBody) {
            return base.Channel.CreateCodeToRecoverPassWord(userName, emailTitle, emailBody);
        }
        
        public System.Threading.Tasks.Task<int> CreateCodeToRecoverPassWordAsync(string userName, string emailTitle, string emailBody) {
            return base.Channel.CreateCodeToRecoverPassWordAsync(userName, emailTitle, emailBody);
        }
        
        public int VerifyCodeToRecoverPassword(string userName, string code) {
            return base.Channel.VerifyCodeToRecoverPassword(userName, code);
        }
        
        public System.Threading.Tasks.Task<int> VerifyCodeToRecoverPasswordAsync(string userName, string code) {
            return base.Channel.VerifyCodeToRecoverPasswordAsync(userName, code);
        }
    }
}
